
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  whatsappPhone: 'whatsappPhone',
  passwordHash: 'passwordHash',
  role: 'role',
  isActive: 'isActive',
  loginEnabled: 'loginEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  code: 'code',
  unit: 'unit',
  qtyOnHand: 'qtyOnHand',
  minStock: 'minStock',
  maxStock: 'maxStock',
  reorderPoint: 'reorderPoint',
  reorderQty: 'reorderQty',
  location: 'location',
  attributeType: 'attributeType',
  attributeValue: 'attributeValue',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  materialId: 'materialId',
  productColorId: 'productColorId',
  productVariationId: 'productVariationId',
  category: 'category',
  price: 'price',
  qtyOnHand: 'qtyOnHand',
  unit: 'unit',
  description: 'description',
  defaultTarget: 'defaultTarget',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  status: 'status',
  targetPcs: 'targetPcs',
  completedPcs: 'completedPcs',
  customerNote: 'customerNote',
  dueDate: 'dueDate',
  userId: 'userId',
  workerId: 'workerId',
  workerContactId: 'workerContactId',
  description: 'description',
  priority: 'priority',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderProductScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  notes: 'notes',
  completedQty: 'completedQty',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaterialMovementScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  orderId: 'orderId',
  userId: 'userId',
  purchaseLogId: 'purchaseLogId',
  movementType: 'movementType',
  quantity: 'quantity',
  unit: 'unit',
  costPerUnit: 'costPerUnit',
  totalCost: 'totalCost',
  notes: 'notes',
  qtyAfter: 'qtyAfter',
  movementDate: 'movementDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgressReportScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  orderProductId: 'orderProductId',
  productId: 'productId',
  userId: 'userId',
  reportText: 'reportText',
  photoPath: 'photoPath',
  percentage: 'percentage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductProgressReportScalarFieldEnum = {
  id: 'id',
  progressReportId: 'progressReportId',
  productId: 'productId',
  orderProductId: 'orderProductId',
  itemsCompleted: 'itemsCompleted',
  itemsTarget: 'itemsTarget',
  status: 'status',
  notes: 'notes',
  completionDate: 'completionDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductProgressPhotoScalarFieldEnum = {
  id: 'id',
  productProgressReportId: 'productProgressReportId',
  photoPath: 'photoPath',
  thumbnailPath: 'thumbnailPath',
  description: 'description',
  uploadDate: 'uploadDate',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderLinkScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  userId: 'userId',
  linkToken: 'linkToken',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductColourScalarFieldEnum = {
  id: 'id',
  colorName: 'colorName',
  colorCode: 'colorCode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariationScalarFieldEnum = {
  id: 'id',
  variationType: 'variationType',
  variationValue: 'variationValue',
  priceAdjustment: 'priceAdjustment',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductPhotoScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  photoPath: 'photoPath',
  thumbnailPath: 'thumbnailPath',
  description: 'description',
  isPrimary: 'isPrimary',
  sortOrder: 'sortOrder',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseLogScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  supplier: 'supplier',
  quantity: 'quantity',
  unit: 'unit',
  pricePerUnit: 'pricePerUnit',
  totalCost: 'totalCost',
  purchaseDate: 'purchaseDate',
  invoiceNumber: 'invoiceNumber',
  receiptPath: 'receiptPath',
  notes: 'notes',
  status: 'status',
  deliveryDate: 'deliveryDate',
  receivedQuantity: 'receivedQuantity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  whatsappPhone: 'whatsappPhone',
  email: 'email',
  address: 'address',
  contactType: 'contactType',
  company: 'company',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  OPERATOR: 'OPERATOR'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  CREATED: 'CREATED',
  NEED_MATERIAL: 'NEED_MATERIAL',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.OrderProductStatus = exports.$Enums.OrderProductStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.MaterialMovementType = exports.$Enums.MaterialMovementType = {
  IN: 'IN',
  OUT: 'OUT',
  ADJUST: 'ADJUST'
};

exports.PurchaseStatus = exports.$Enums.PurchaseStatus = {
  PENDING: 'PENDING',
  ORDERED: 'ORDERED',
  RECEIVED: 'RECEIVED',
  CANCELLED: 'CANCELLED'
};

exports.ContactType = exports.$Enums.ContactType = {
  CUSTOMER: 'CUSTOMER',
  SUPPLIER: 'SUPPLIER',
  WORKER: 'WORKER',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Material: 'Material',
  Product: 'Product',
  Order: 'Order',
  OrderProduct: 'OrderProduct',
  MaterialMovement: 'MaterialMovement',
  ProgressReport: 'ProgressReport',
  ProductProgressReport: 'ProductProgressReport',
  ProductProgressPhoto: 'ProductProgressPhoto',
  OrderLink: 'OrderLink',
  ProductColour: 'ProductColour',
  ProductVariation: 'ProductVariation',
  ProductPhoto: 'ProductPhoto',
  PurchaseLog: 'PurchaseLog',
  Contact: 'Contact'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
